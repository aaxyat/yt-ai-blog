"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from os import getenv
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_spectacular",
    "api",
    "accounts",
    "management",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "MinimumLengthValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "CommonPasswordValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "NumericPasswordValidator"
        ),
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_CONTENT_NEGOTIATION_CLASS": (
        "rest_framework.negotiation.DefaultContentNegotiation"
    ),
}

SPECTACULAR_SETTINGS = {
    "TITLE": "YouTube Blog Generator API",
    "DESCRIPTION": """
    # YouTube Blog Generator API

    A powerful API that converts YouTube videos into professional blog posts using AI.

    ## Core Features
    - **AI-Powered Blog Generation**: Convert any YouTube video into a well-structured blog post
    - **User Management**: Email-based authentication with JWT tokens
    - **Blog Management**: Create, list, and delete your blog posts
    - **Theme Preferences**: Customize UI theme (light/dark)
    - **Invite-Only Registration**: Secure, controlled user access
    - **Admin Controls**: Comprehensive user and invite management

    ## Authentication
    This API uses JWT (JSON Web Token) authentication:

    1. **Registration** (Invite Only):
       - Obtain an invite code from an administrator
       - Register at `/api/auth/register/` with your email and invite code
       - Store your access and refresh tokens

    2. **Authentication Flow**:
       - Get tokens: `POST /api/auth/token/`
       - Refresh token: `POST /api/auth/token/refresh/`
       - Include in requests: `Authorization: Bearer <token>`

    3. **Token Lifecycle**:
       - Access tokens expire after 1 hour
       - Refresh tokens expire after 1 day
       - Refresh tokens are automatically rotated

    ## API Structure

    ### Blog Generation (`/api/blog/`)
    - `POST /generate/`: Create blog from YouTube video
    - `GET /list/`: View your blog posts
    - `DELETE /<id>/`: Remove a blog post

    ### User Management (`/api/auth/`)
    - Registration and authentication
    - Password management
    - Theme preferences
    - Account deletion

    ### Admin Controls (`/api/management/`)
    - User management
    - Invite code generation
    - Usage tracking
    - User banning

    ## Rate Limiting
    - Standard users: 100 requests/hour
    - Blog generation: 10 requests/hour
    - Admin endpoints: 1000 requests/hour

    ## Error Handling
    The API uses standard HTTP status codes:
    - 2xx: Success
    - 4xx: Client errors (invalid input, unauthorized)
    - 5xx: Server errors

    Common error responses include:
    ```json
    {
        "error": "Detailed error message",
        "code": "error_code"
    }
    ```

    ## Best Practices
    1. Always validate YouTube URLs before submission
    2. Store tokens securely
    3. Implement token refresh logic
    4. Handle rate limits gracefully
    5. Implement proper error handling

    ## Support
    For API support or to report issues:
    - Email: support@example.com
    - Documentation: /api/docs/
    - OpenAPI Schema: /api/schema/
    """,
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": True,
    "SERVE_PERMISSIONS": ["rest_framework.permissions.AllowAny"],
    "SERVE_AUTHENTICATION": None,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
        "defaultModelsExpandDepth": -1,
        "defaultModelExpandDepth": 3,
        "filter": True,
        "displayRequestDuration": True,
    },
    "TAGS": [
        {
            "name": "Blog Posts",
            "description": """
            View and manage your generated blog posts.
            
            These endpoints allow you to:
            - View your blog collection
            - Remove unwanted blog posts
            - Track creation and update times
            
            Each blog post includes:
            - Generated blog content
            - Original YouTube video information
            - Author details
            - Timestamps
            """
        },
        {
            "name": "Authentication",
            "description": """
            User authentication endpoints including registration (invite-only),
            token management, and session control.
            """
        },
        {
            "name": "User Management",
            "description": """
            Personal account management including password changes,
            theme preferences, and account deletion.
            """
        },
        {
            "name": "Admin",
            "description": """
            Administrative endpoints for user management, invite code generation,
            usage tracking, and platform moderation. Requires superuser access.
            """
        }
    ],
    "SECURITY": [{"bearerAuth": []}],
    "SECURITY_DEFINITIONS": {
        "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "description": """
            JWT token authentication. Format: Bearer <token>
            
            Obtain token from /api/auth/token/
            """
        }
    },
    "SERVERS": [
        {"url": "", "description": "Current environment"}
    ],
    "CONTACT": {
        "name": "API Support",
        "email": "support@example.com",
        "url": "https://example.com/support"
    },
    "LICENSE": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
    },
    "EXTERNAL_DOCS": {
        "description": "Additional Documentation",
        "url": "/redoc/"
    }
}

OPENAI_API_KEY = getenv("OPENAI_API_KEY")
OPENAI_BASE_URL = getenv("OPENAI_BASE_URL", "https://api.groq.com/openai/v1")
OPENAI_MODEL = getenv("OPENAI_MODEL", "mixtral-8x7b-32768")

print("Debug: OpenAI Settings")
print(f"Base URL: {OPENAI_BASE_URL}")
print(f"Model: {OPENAI_MODEL}")
print(f"API Key exists: {'Yes' if OPENAI_API_KEY else 'No'}")

# JWT Settings
from datetime import timedelta
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
}

AUTH_USER_MODEL = 'accounts.User'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:5174",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:5174",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Additional CORS settings
CORS_EXPOSE_HEADERS = [
    "content-type",
    "authorization",
]

# Make sure corsheaders middleware is at the top
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # This should be first
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Add CORS_ORIGIN_ALLOW_ALL for development (optional)
if DEBUG:
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOW_PRIVATE_NETWORK = True
